1_Énoncé

Installation sonore interactive pour questions et réponses


2_Description

Ce projet proposera une musique générée selon les réponses des participant.e.s aux questions posées par l'installation. Plus 
précisément, un écran affichera des questions aléatoirement auxquelles on pourra répondre grâce à 4 boutons disposés à l'avant de 
l'installation. Chacun des boutons entraînera l'évolution de la musique dans une direction différente, choisissant différents 
traitements, sons et/ou forme globale selon la réponse reçue. Les questions seront variées et pas directement liées à la musique 
elle-même (pas de questions théoriques). Les boutons-réponses seront associés à des couleurs (ou à un autre paramètre 
non-musical, le choix est encore à faire). Les participant.e.s devront ainsi répondre aux questions et guider la musique de 
manière intuitive plutôt qu'en suivant des règles claires et/ou préétablies.


3_Analyse des besoins

Composition : création d'un pièce en plusieurs parties

Variations musicales : élaboration de variantes (de traitements, de sons) destinées à
chaque partie de la musique, tout dépendant des réponses

Corps de possibilités : gestion des différents chemins possibles et enchaînement adéquat (formation d'un squelette modulable)

Dispositif physique d'interaction : mise en place des boutons-réponses et connexion avec le programme

Questions/texte : mise en place d'un dispositif d'affichage des questions de manières aléatoires (écran d'ordinateur ou écran LCD).


4_Acquisition de connaissances

Recherche/étude de projets similaires, articles, inspirations générales
http://www.lozano-hemmer.com/33_questions_per_minute.php

Recherche de librairies utiles pour la gestion de musique interactive

Librairie GEM (pd-extended)

Utilisation d'un écran LCD avec arduino
https://www.arduino.cc/en/Tutorial/HelloWorld
https://create.arduino.cc/projecthub/projects/tags/lcd


5_Modèle

Une question issue de la banque de question est posée au participant.

Quatre boutons-réponses permettent aux participant.e.s d'interagir avec l'installation.

Différents chemins sonores et musicaux existent pour chacune des réponses possibles.
Différents traitements, enchaînements de sons ou direction globale y sont appliqués et offrent un résultat musical «adapté» au participant.

À chaque stade de la musique, une nouvelle question est posée afin de faire évoluer la pièce.


6_Méthodes (abstractions développées pour réaliser les composantes)

Affichage des questions à l'écran (ordinateur ou autre externe). Pd-extended/vanilla 
64 bits

Gestion des questions posées (aléatoires ou en lien avec les réponses préalablement données)

Sous-patch «chemin» comme guide général qui suivra le parcours selon les réponses et qui agira comme squelette de la pièce.

Plusieurs sous-patch de possibilités de traitements, enchaînements sons et/ou direction globale (suivant la sous-patch «chemin»).


7_Implémentation

Pure data est le langage choisi pour le projet.
Cependant (mise à jour du 10 février 2019), GEM sera utilisé pour l'affichage des 
questions et il ne fonctionne pas dans PD-vanilla. Je continuerai donc le 
développement dans Pd-extended.

Pd-vanilla 64 bits.


8_Tests et maintenance

8 février 2019
- Recherche pour l'affichage de texte à partir de pure data (GEM?, ne fonctionne pas
complètement, certains objets comme text3d ne sont pas inclus dans la librairie)
- Affichage dans la console de pure data (avec un print) fonctionnerait, mais on ne 
peut pas zoomer, donc trop petit
- Début de la patch «compo», 4 possibilités, 4 formes d'ondes...

10 février 2019
- Essais pour l'affichage avec les objets [qlist] et [textfile], toujours infructueux, 
le fichier texte ne se met à jour que lorsqu'il est sauvegardé
- Réussite! La librairie GEM fonctionne, mais seulement dans PD-extented et non 
dans vanilla. Affichage simple des questions sur une fenêtre externe [gemwin].

15 février 2019
- Text-to-speech avec l'objet [shell].
- Gestion des étapes de développement de la compo, interventions de la
machine (semblant d'interaction machine/participant.e.s, il ne s'agit plus 
seulement que de questions aléatoires et sans lien entre elles).

17 février 2019
- Début de la mise en place pour une gestion/construction de questions aléatoire (en 
plusieurs parties).

21 février 2019
- Continuation développement questions+gestion

22 février 2019
- Des clics apparaissent avant chaque intervention de voix lorsque la musique 
démarre dans pd... à voir (ne semblait pas faire ça dans pd-extended).
- Finalisation de l'intro (qui sera fixe), lien vers les questions aléatoires
- Création de questions aléatoires : le procédé fonctionne, mais il va falloir mieux 
organiser les sous-classes afin que la syntaxe, les accords de verbes et les agencements 
face du sens/soient bien construits.
- Problème avec les sous-patchs pour l'affichage des choix de réponses et leur retrait.

23 février 2019
- Formation des questions avec des boîtes à messages, «set» et «add2». Réduire le nombre 
de fin de questions à maximum 5 pour l'instant.
- Le bang out du l'objet [shell] pour trigger les prochain choix (avec objet [random]) 
et pour afficher la question à la toute fin.
- Trouver une manière plus simple pour effacer les choix de réponse après que la 
question ait été répondue (trop de sous-patch).

24 février 2019
- À faire : système d'affichage/désaffichage des réponses (lien 4 boutons/4 réponses).
- *** Une seule sous-patch «réponses» peut être faite pour chaque catégorie de 
questions. Il ne faudra créer que plusieurs boîtes messages avec différentes réponses, 
mais les objets généraux (text2d, gemhead, translate) n'auront pas à être copiés plusieurs 
fois. (à faire)

17 mars 2019
- Continuation et fin configuration des sous-patchs de création de questions aléatoires 
+ affichage écran principal (je me limite pour l'instant à une douzaine de possibilité 
par type de questions)
- Début écriture/gestion/affichage des réponses possibles
NB. La musique est pour l'instant absente, je me concentre premièrement sur la gestion 
des questions/réponses et ensuite, élaborerai la musique.

18 mars 2019
- Suite sous-patchs gestions des réponses. En ce moment, chaque catégorie de question 
contient une sous-patch «answers» qui contient elle-même 3 ou 4 sous-patchs de 
possibilités. Peut-être existe-t-il une manière plus simple avec moins de sous-patchs 
afin d'organiser le tout (?).

23 mars 2019
- L'intro est mise en place. Les questions sont posées aléatoirement et le choix de 
réponse occasionne une réaction de la part de l'installation et l'apparition d'une 
note tenue. S'enchaîne par la suite une autre question créée aléatoirement et de 
nouveaux choix de réponse, etc.
- Évolution musique : mettre en place un counter global qui gardera le compte d'où nous 
sommes rendus. À certains moments, selon la réponse choisie par le participant, un 
nouveau processus sonore, son ou effet sera introduit.
- Pour l'instant, le tout commence avec de simples sinus. Après 3 questions, premier 
événement sonore spécifique à la réponse (tremolo sur la canal correspondant à la 
réponse choisie).

25 mars 2019
- Peut-être utiliser l'objet [demultiplex~] au lieu de [spigot~] puisqu'il offre 
plusieurs sorties possibles.

5 avril 2019
- Mise à jour des réponses possibles (pour qu'elles aient du sens).
- Ajustement de la gestion-musique = 1 [counter] par «tranche» de son.
- Ajout de «surprises sonores» pour certains choix de réponses avec arrays et [tabplay~].
** Retarder la réaction de l'ordinateur lorsqu'il y a un [tabplay~].

6 avril 2019
- Élaboration du processus sonore d'une des voix (sera ensuite attribuée à chaque voix 
avec quelques variantes).
- Retard de la réaction robotique lors de «surprises sonores» (samples) mise en place.
** Je vais conserver un [counter] global afin d'appliquer un effet global rendu à un 
certain moment dans l'évolution de la musique (entre autres pour offrir un genre de 
point culminant/fin à un moment pas trop éloigné, le test en classe ne devant pas 
s'étirer trop longtemps).


---------- MISE À JOUR EN DATE DU 24 FÉVRIER ----------

- Pour jouer, ouvrir QA_FenetreDeJeu.pd. De là, les fonctions «start», «reset» et 
«open/close_window» sont accessible, ainsi que les grandes sous-patchs 
QA_GestionQuestions et QA_GestionMusique.
- Un sinus se fait entendre suite à la première question posée, question qui sera toujours 
la même à chaque début de jeu (introduction écrite). Par la suite, les questions sont 
générées aléatoirement. En ce moment, seule la sous-patch pour les questions «Who» est 
fonctionnelle. Les réponses sont toujours les mêmes, peu importe la question, il ne s'agit 
là que d'un test d'affichage. 
- Pour la suite des choses, je devrai faire le lien entre les actions du participants sur 
les boutons réponses et l'affichage/désaffichage des questions réponses ainsi que 
l'évolution dans la musique (qui n'est pas encore développée). Je m'enligne pour 
l'instant sur l'utilisation de [counter] et [sel] afin de gérer le tout. Maintenant, 
la continuation du jeu au-delà du 1er affichage de question n'est pas possible, car 
presser un nouveau bouton repart la boucle d'introduction.
- L'évolution musicale se fera par ajout de traitements sur l'onde sinusoïdale de base.


********** Questions rencontre 18 février **********

- Suggestions pour intégrer une meilleure gestion entre les patchs (hiérarchie/
interactions entre les choix du participants, le son et les questions) afin que le 
programme soit le moins confus possible.
- Création de questions aléatoires au lieu de «piger» une question aléatoirement, mais 
déjà construite
- Conseils/mises en garde/suggestions pertinent.e.s concernant GEM? Possibilité de 
combiner le projet du cours avec celui de Musique visuelle 2 (développement plus 
approfondi de l'aspect/réaction/évolution visuelle)?


---------- MISE À JOUR EN DATE DU 25 MARS ----------
- Lorsqu'ouvert avec PD vanilla 0.49, le son et l'affichage GEM entrent en conflit (ex. 
de simples sinus se mettent «sursauter», des glitch's apparaissent un peu partout). Ce 
problème est absent avec pd-extended.
- Six types de question peuvent se former, accompagnés de réponses (pour l'instant, 
toujours les mêmes). Le gestion et l'affichage fonctionnent bien. Le tout fonctionne 
en boucle simple pour l'instant : le départ appelle toujours la même question, puis 
une réponse entraîne la création d'une nouvelle question posée quelques secondes plus 
tard.
- La musique est pour l'instant très minimale et pas vraiment développée, c'est la 
prochaine étape. Le tout commence avec 4 possibilités de sinus (hauteurs différentes). 
Chaque réponse correspondra à un traitement appliqué sur un de ceux-ci, à la lecture d'un 
fichier audio ou autre. La sous-patch «pd envoi_sel» dans QA_GestionMusique s'occupe de 
déclencher un objet [spigot~] correspondant au bouton réponse choisi. En ce moment, il 
n'enclenche qu'une seule étape : l'application d'un tremolo sur un sinus.


********** Questions rencontre 25 février **********
- Problèmes son pd-0.49? (pas dans pd-extended)
- Gestion du son, meilleure option que [spigot~]? Je viens de trouver [demultiplex~], 
plus de sorties possibles. D'autres idées?


############# Commentaires ###############

Excellent projet!

Je ne suis pas convaincu de la nécéssité d'un arduino pour l'affichage. Il me semble qu'un écran ou un projecteur sont plus simples à intégrer et l'affichage peut se faire directement de puredata. Un seul environnement de travail sera plus facile à gérer et simplifierait aussi la communication entre les questions/réponses et la musique.

10/10

